apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

version = VERSION_NAME
group = GROUP
def pomConfig = {
    licenses {
        license {
            name POM_LICENSE_NAME
            url POM_LICENSE_URL
        }
    }
    developers {
        developer {
            id 'saransh9'
            name 'saransh gupta'
            email 'saransh094@gmail.com'
        }
    }

    scm {
        connection POM_SCM_CONNECTION
        developerConnection POM_SCM_CONNECTION
        url POM_URL

    }
}

publishing {
    publications {
        Production(MavenPublication) {
            artifact("$rootDir/remoteconfigdebugger-no-op/build/outputs/aar/remoteconfigdebugger-no-op-release.aar")
            // replace with your library name
            groupId group
            artifactId 'library-no-op' // replace with your library artifact id
            version version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', POM_DESCRIPTION)
                root.appendNode('name', 'RemoteConfigDebugger')
                root.appendNode('url', POM_URL)
                root.children().last() + pomConfig
                def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included.
                    if (it.name != 'unspecified' && !it.name.contains("org.gradle.api.internal")) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
tasks.withType(Javadoc).all {
    enabled = false
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty('user')
    key = properties.getProperty('apiKey')
    publications = ['Production']
    configurations = ['archives']
    dryRun = false
    override = false
    publish = true
    pkg {
        repo = 'RemoteConfigDebugger'
        name = 'com.github.RemoteConfigDebugger.library-no-op'
        desc = POM_DESCRIPTION
        vcsUrl = 'https://github.com/saransh9/RemoteConfigDebugger.git'
        websiteUrl = POM_URL
        licenses = ["Apache-2.0"]
        publish = true
        publicDownloadNumbers = true
        version {
            name = this.version
            released = new Date()
            vcsTag = this.version
        }
    }
}